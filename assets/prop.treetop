##
# This parser is a fork of my work on "rl" but now adapted to Guerzoni's 'LPC' syntax, where:
# A constant is T (verum) or ⊥ (falsum)
# A 'sentencial char' is pN (like p0, p1...)
# A formula: ϕ ::= (¬ϕ) | (ϕ ∧ ϕ) | (ϕ ∨ ϕ) | (ϕ → ϕ) | [A-Z] 
##

grammar PropositionalCalculus

  rule formula
    expression space? binary_operator space? expression {
      def content
        [ expression1.content, binary_operator.text_value, expression2.content ]
      end
    } /
    expression
  end

  rule expression
    '(' space? expression space? ')' {
      def content
        expression.content
      end
    } /
    '(' space? expression space? binary_operator space? expression space? ')' {
      def content
        [ expression1.content, binary_operator.text_value, expression2.content ]
      end
    } /
    unary_operator space? expression {
      def content
        [ unary_operator.text_value, expression.content ]
      end
    } /
    atom
  end

  rule unary_operator
    negation
  end
  
  rule binary_operator
    conjunction / disjunction / implication / biimplication
  end
  
  rule negation
    '~'
  end

  rule implication
    '=>'
  end
  
  rule biimplication
    '<=>'
  end
  
  rule conjunction
    '^'
  end
  
  rule disjunction
    'v'
  end

  rule atom
    proposition / constant / variable
  end
  
  rule proposition
    [A-Z] {
      def content
        text_value
      end
    }
  end

  rule constant
    verum / falsum
  end
  
  rule variable
    ":" proposition {
      def content
        proposition.text_value.to_sym
      end
    }
  end

  rule verum
    'true' {
      def content
        true
      end
    }
  end

  rule falsum
    'false' {
      def content
        false
      end
    }
  end

  rule space
    [\s\n\r\t]+
  end

end